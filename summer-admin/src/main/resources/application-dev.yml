# 开发环境
spring:
  datasource:
    # 多数据源
    dynamic:
      # Sql打印
      p6spy: true
      # 是否严格匹配所有数据源
      strict: false
      # 默认数据源
      primary: master
      datasource:
        # system模块数据源
        system:
          driver-class-name: com.mysql.cj.jdbc.Driver
          # rewriteBatchedStatements=true（批处理优化，大幅提升批量插入/更新/删除性能，但对数据库有性能损耗）
          url: jdbc:mysql://192.168.2.71:3306/summer-system?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&serverTimezone=Asia/Shanghai&autoReconnect=true&rewriteBatchedStatements=true
          username: root
          password: 123456
        # business模块数据源（主从）
        master:
          driver-class-name: com.mysql.cj.jdbc.Driver
          url: jdbc:mysql://192.168.2.71:3306/summer-business?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&serverTimezone=Asia/Shanghai&autoReconnect=true&rewriteBatchedStatements=true
          username: root
          password: 123456
        slave:
          lazy: true
          driver-class-name: com.mysql.cj.jdbc.Driver
          url: jdbc:mysql://docker-1:3308/summer-business?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&serverTimezone=Asia/Shanghai&autoReconnect=true
          username: root
          password: asda1992

# Redis，只有application.cache.type: REDIS时会生效
redis:
  # 模式，值：STANDALONE/CLUSTER
  mode: STANDALONE
  password: asda1992
  timeout: 5000
  # 单机模式，只有redis.mode: STANDALONE时会生效
  standalone:
    host: origin-1
    port: 6379
    database: 0
  # 集群模式，只有redis.mode: CLUSTER时会生效
  cluster:
    node-set: docker-1:6381,docker-1:6382,docker-1:6383,docker-1:6384,docker-1:6385,docker-1:6386

# 定时任务启动
quartz-startup:
  auto: false
  delay: 20

logging:
  # 日志级别
  level:
    me:
      xiajhuan:
        summer:
          # core模块
          core:
            # Excel
            excel: debug
            # 限流
            ratelimiter: debug
            # 工具
            utils: info
          # system模块
          system:
            # handler
            handler:
              # 异常处理
              exception: info
          # admin模块
          admin:
            # api
            api: info
            # business
            business: info
            # task
            task: info